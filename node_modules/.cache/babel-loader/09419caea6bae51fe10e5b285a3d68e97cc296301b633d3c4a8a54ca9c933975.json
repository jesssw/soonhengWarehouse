{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\sh-warehouse\\\\soonhengWarehouse\\\\src\\\\Sidebar\\\\Model\\\\Model.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"./Model.css\";\n// import data from \"../../db/data\";\n\n// const uniqueModel = [...new Set(data.map(item => item.model))];\n// const modelOptions = uniqueModel.map(model => (\n//   <option key={model} value={model}>{model}</option>\n// ));\n// function Model({ handleChange, selectedCompany }) {\n//   const [selectedModel, setSelectedModel] = useState(\"\");\n\n//   useEffect(() => {\n//     // Reset the selected model when the selected company changes\n//     setSelectedModel(\"\");\n//   }, [selectedCompany]);\n\n//   const handleModelChange = (event) => {\n//     setSelectedModel(event.target.value); // Update the selected model\n//     handleChange(event); // Invoke the handleChange function for model changes\n//   };\n\n//   // Define models based on the selected company\n//   let models = [];\n//   if (selectedCompany === \"Honda\") {\n//     models = [\"All\",\"City\", \"Civic\"];\n//   } else if (selectedCompany === \"Toyota\") {\n//     models = [\"All\",\"Corolla\", \"Camry\"];\n//   } else {\n//     models = [\"All\"];\n//   }\n\n//   return (\n//     <div>\n//       <h2 className=\"sidebar-title\">Model</h2>\n//       <div>\n//         <select value={selectedModel} onChange={handleModelChange} className=\"model-dropdown\" name=\"model\">\n//           {models.map((model, index) => (\n//             <option key={index} value={model}>\n//               {model}\n//             </option>\n//           ))}\n//         </select>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Model;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./Model.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Model(_ref) {\n  _s();\n  let {\n    handleChange,\n    selectedCompany,\n    data\n  } = _ref;\n  const [selectedModel, setSelectedModel] = useState(\"\");\n  useEffect(() => {\n    // Reset the selected model when the selected company changes\n    setSelectedModel(\"\");\n  }, [selectedCompany]);\n  useEffect(() => {\n    console.log(\"Selected company:\", selectedCompany);\n    console.log(\"Data:\", data);\n  }, [selectedCompany, data]); // Log selectedCompany and data whenever they change\n\n  const handleModelChange = event => {\n    setSelectedModel(event.target.value); // Update the selected model\n    handleChange(event); // Invoke the handleChange function for model changes\n  };\n\n  // Extract unique models based on the selected company from the provided data\n  let models = [\"All\"]; // Initialize with \"All\" option\n  if (data && Array.isArray(data)) {\n    const uniqueModels = [...new Set(data.filter(item => item.company === selectedCompany).map(item => item.model))];\n    models = models.concat(uniqueModels);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"sidebar-title\",\n      children: \"Model\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedModel,\n        onChange: handleModelChange,\n        className: \"model-dropdown\",\n        name: \"model\",\n        children: models.map((model, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: model,\n          children: model\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(Model, \"CoJ2MbvuIp9LkYOVFV9Fgj+E8w0=\");\n_c = Model;\nexport default Model;\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Model","_ref","_s","handleChange","selectedCompany","data","selectedModel","setSelectedModel","console","log","handleModelChange","event","target","value","models","Array","isArray","uniqueModels","Set","filter","item","company","map","model","concat","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onChange","name","index","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/sh-warehouse/soonhengWarehouse/src/Sidebar/Model/Model.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import \"./Model.css\";\r\n// import data from \"../../db/data\";\r\n\r\n// const uniqueModel = [...new Set(data.map(item => item.model))];\r\n// const modelOptions = uniqueModel.map(model => (\r\n//   <option key={model} value={model}>{model}</option>\r\n// ));\r\n// function Model({ handleChange, selectedCompany }) {\r\n//   const [selectedModel, setSelectedModel] = useState(\"\");\r\n  \r\n//   useEffect(() => {\r\n//     // Reset the selected model when the selected company changes\r\n//     setSelectedModel(\"\");\r\n//   }, [selectedCompany]);\r\n  \r\n\r\n//   const handleModelChange = (event) => {\r\n//     setSelectedModel(event.target.value); // Update the selected model\r\n//     handleChange(event); // Invoke the handleChange function for model changes\r\n//   };\r\n\r\n//   // Define models based on the selected company\r\n//   let models = [];\r\n//   if (selectedCompany === \"Honda\") {\r\n//     models = [\"All\",\"City\", \"Civic\"];\r\n//   } else if (selectedCompany === \"Toyota\") {\r\n//     models = [\"All\",\"Corolla\", \"Camry\"];\r\n//   } else {\r\n//     models = [\"All\"];\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2 className=\"sidebar-title\">Model</h2>\r\n//       <div>\r\n//         <select value={selectedModel} onChange={handleModelChange} className=\"model-dropdown\" name=\"model\">\r\n//           {models.map((model, index) => (\r\n//             <option key={index} value={model}>\r\n//               {model}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Model;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./Model.css\";\r\n\r\nfunction Model({ handleChange, selectedCompany, data }) {\r\n  const [selectedModel, setSelectedModel] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // Reset the selected model when the selected company changes\r\n    setSelectedModel(\"\");\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Selected company:\", selectedCompany);\r\n    console.log(\"Data:\", data);\r\n  }, [selectedCompany, data]); // Log selectedCompany and data whenever they change\r\n\r\n  const handleModelChange = (event) => {\r\n    setSelectedModel(event.target.value); // Update the selected model\r\n    handleChange(event); // Invoke the handleChange function for model changes\r\n  };\r\n\r\n  // Extract unique models based on the selected company from the provided data\r\n  let models = [\"All\"]; // Initialize with \"All\" option\r\n  if (data && Array.isArray(data)) {\r\n    const uniqueModels = [...new Set(data.filter(item => item.company === selectedCompany).map(item => item.model))];\r\n    models = models.concat(uniqueModels);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"sidebar-title\">Model</h2>\r\n      <div>\r\n        <select value={selectedModel} onChange={handleModelChange} className=\"model-dropdown\" name=\"model\">\r\n          {models.map((model, index) => (\r\n            <option key={index} value={model}>\r\n              {model}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Model;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}